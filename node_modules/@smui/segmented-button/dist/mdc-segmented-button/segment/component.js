/**
 * @license
 * Copyright 2020 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
import { MDCComponent } from '@material/base';
import { MDCRipple } from '@material/ripple';
import { MDCRippleFoundation } from '@material/ripple';
import { events } from './constants';
import { MDCSegmentedButtonSegmentFoundation } from './foundation';
/**
 * Implementation of MDCSegmentedButtonSegmentFoundation
 */
export class MDCSegmentedButtonSegment extends MDCComponent {
    get ripple() {
        return this.rippleComponent;
    }
    static attachTo(root) {
        return new MDCSegmentedButtonSegment(root);
    }
    initialize(rippleFactory = (el, foundation) => new MDCRipple(el, foundation)) {
        const rippleAdapter = Object.assign(Object.assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: () => this.foundation.getDimensions() });
        this.rippleComponent = rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
    }
    initialSyncWithDOM() {
        this.handleClick = () => {
            this.foundation.handleClick();
        };
        this.listen(events.CLICK, this.handleClick);
    }
    destroy() {
        this.ripple.destroy();
        this.unlisten(events.CLICK, this.handleClick);
        super.destroy();
    }
    getDefaultFoundation() {
        // DO NOT INLINE this variable. For backward compatibility, foundations take
        // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any
        // methods, we need a separate, strongly typed adapter variable.
        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.
        const adapter = {
            isSingleSelect: () => {
                return this.isSingleSelect;
            },
            getAttr: (attrName) => {
                return this.root.getAttribute(attrName);
            },
            setAttr: (attrName, value) => {
                this.root.setAttribute(attrName, value);
            },
            addClass: (className) => {
                this.root.classList.add(className);
            },
            removeClass: (className) => {
                this.root.classList.remove(className);
            },
            hasClass: (className) => {
                return this.root.classList.contains(className);
            },
            notifySelectedChange: (selected) => {
                this.emit(events.SELECTED, {
                    index: this.index,
                    selected,
                    segmentId: this.getSegmentId(),
                }, true /* shouldBubble */);
            },
            getRootBoundingClientRect: () => {
                return this.root.getBoundingClientRect();
            },
        };
        return new MDCSegmentedButtonSegmentFoundation(adapter);
    }
    /**
     * Sets segment's index value
     *
     * @param index Segment's index within wrapping segmented button
     */
    setIndex(index) {
        this.index = index;
    }
    /**
     * Sets segment's isSingleSelect value
     *
     * @param isSingleSelect True if wrapping segmented button is single select
     */
    setIsSingleSelect(isSingleSelect) {
        this.isSingleSelect = isSingleSelect;
    }
    /**
     * @return Returns true if segment is currently selected, otherwise returns
     * false
     */
    isSelected() {
        return this.foundation.isSelected();
    }
    /**
     * Sets segment to be selected
     */
    setSelected() {
        this.foundation.setSelected();
    }
    /**
     * Sets segment to be not selected
     */
    setUnselected() {
        this.foundation.setUnselected();
    }
    /**
     * @return Returns segment's segmentId if it was set by client
     */
    getSegmentId() {
        return this.foundation.getSegmentId();
    }
}
//# sourceMappingURL=component.js.map